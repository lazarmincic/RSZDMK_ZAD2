#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
//#inlcude <string.h> //ne radi u sim.

#define BR_KORISNIKA 10

//FILE uart_str = FDEV_SETUP_STREAM (usartPutChar, NULL, _FDEV_SETUP_RW); //ne radi u sim.

//Velicina prijemnog bafera (mora biti 2^n)
#define USART_RX_BUFFER_SIZE 64

char Rx_Buffer[USART_RX_BUFFER_SIZE];			//prijemni FIFO bafer
volatile unsigned char Rx_Buffer_Size = 0;	//broj karaktera u prijemnom baferu
volatile unsigned char Rx_Buffer_First = 0;
volatile unsigned char Rx_Buffer_Last = 0;

ISR(USART_RX_vect)
{
  	Rx_Buffer[Rx_Buffer_Last++] = UDR0;		//ucitavanje primljenog karaktera
	Rx_Buffer_Last &= USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
	if (Rx_Buffer_Size < USART_RX_BUFFER_SIZE)
		Rx_Buffer_Size++;					//inkrement brojaca primljenih karaktera
}

void usartInit(unsigned long baud)
{
	UCSR0A = 0x00;	//inicijalizacija indikatora
					//U2Xn = 0: onemogucena dvostruka brzina
					//MPCMn = 0: onemogucen multiprocesorski rezim

	UCSR0B = 0x98;	//RXCIEn = 1: dozvola prekida izavanog okoncanjem prijema
					//RXENn = 1: dozvola prijema
					//TXENn = 1: dozvola slanja

	UCSR0C = 0x06;	//UMSELn[1:0] = 00: asinroni rezim
					//UPMn[1:0] = 00: bit pariteta se ne koristi
					//USBSn = 0: koristi se jedan stop bit
					//UCSzn[2:0] = 011: 8bitni prenos

	UBRR0 = F_CPU / (16 * baud) - 1;

	sei();	//I = 1 (dozvola prekida)
}

unsigned char usartAvailable()
{
	return Rx_Buffer_Size;		//ocitavanje broja karaktera u prijemnom baferu
}

void usartPutChar(char c)
{
	while(!(UCSR0A & 0x20));	//ceka da se setuje UDREn (indikacija da je predajni bafer prazan)
	UDR0 = c;					//upis karaktera u predajni bafer
}

void usartPutString(char *s)
{
	while(*s != 0)				//petlja se izvrsava do nailaska na nul-terminator
	{
		usartPutChar(*s);		//slanje tekuceg karaktera
		s++;					//azuriranje pokazivaca na tekuci karakter
	}
}

void usartPutString_P(const char *s)
{
	while (1)
	{
		char c = pgm_read_byte(s++);	//citanje sledeceg karaktera iz programske memorije
		if (c == '\0')					//izlazak iz petlje u slucaju
			return;						//nailaska na terminator
		usartPutChar(c);				//slanje karaktera
	}
}

char usartGetChar()
{
	char c;

	if (!Rx_Buffer_Size)						//bafer je prazan?
		return -1;
  	c = Rx_Buffer[Rx_Buffer_First++];			//citanje karaktera iz prijemnog bafera
	Rx_Buffer_First &= USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
	Rx_Buffer_Size--;							//dekrement brojaca karaktera u prijemnom baferu

	return c;
}

unsigned char usartGetString(char *s)
{
	unsigned char len = 0;

	while(Rx_Buffer_Size) 			//ima karaktera u faferu?
		s[len++] = usartGetChar();	//ucitavanje novog karaktera

	s[len] = 0;						//terminacija stringa
	return len;						//vraca broj ocitanih karaktera
}

  char korisnici [BR_KORISNIKA][32]  =

{

    "Sundjer Bob Kockalone",
    "Dijego Armando Maradona",
    "Bond. Dzejms bond.",
    "Zoran Kostic Cane",
    "Kim Dzong Un",
	"Mido Masatake",
	"Ourjo Rikako",
	"Okamoto Nobuhiko",
	"Cunemori Akane",
	"Sindo Arata"
};

 char pinovi [BR_KORISNIKA][5]  = 
{"5346", "2133", "7445", "8756", "7435","1222","5943","2834","7381","4398"};

bool str_cpmr( const char* str1, char* str2)
{
	int i=0;
	while (str1[i]!='\0') i++;
    int l1 = i;
	i = 0;
	while (str2[i]!='\0') i++;
	int l2 = i ;          

    if(l1 != l2)
        return false;

    for(int i = 0 ; i < l1 ; i++)
        if(str1[i] != str2[i])
            return false ;

    return true ;
}



int main()
{
	usartInit(9600);
	//stdout = &uart_str; //ne radi u sim.
  	char str[32];
	
	
	while(1)
	{
		usartPutString("Unesite ime i prezime:\r\n");
		while(!usartAvailable());
		_delay_ms(100);
		usartGetString(str);
		
		int i = 0;
		int br = -1; //koji br. korisnika iz baze je jednak unetom
		
		while (i!= BR_KORISNIKA) // vrti po korisnicima
		{
			
			bool jednak = str_cpmr(korisnici[i],str);
			if (jednak) 
			{
				
				br = i;
				break;
			}
			i++;
		}
		if (br==-1)
		{
			usartPutString("Uneto ime i prezime se ne nalazi u bazi. \r\n");
			continue;
		}
		
		usartPutString("Uneti pin: \r\n");
		char unet_pin[5];
		for (int i = 0; i<4; i++)
		{
			while(!usartAvailable());
			_delay_ms(100);
			unet_pin[i] = usartGetChar();
			usartPutChar('*');
		}
		unet_pin[4] = '\0';
		usartPutString("\r\n");
		
		
		bool jednaki = str_cpmr(pinovi[br],unet_pin);
		
		if (jednaki)
			usartPutString("PIN ispravno unet.\r\n");
		else
			usartPutString("PIN neispravno unet.\r\n");
		
		
		
	}

	return 0;
}